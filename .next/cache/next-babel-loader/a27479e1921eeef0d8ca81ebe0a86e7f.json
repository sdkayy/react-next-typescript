{"ast":null,"code":"export function mergeObjects(...args) {\n  const dst = {};\n  let src;\n  let p; // @ts-ignore\n\n  const aargs = [].splice.call(args, 0);\n\n  while (aargs.length > 0) {\n    const idx = 0;\n    src = aargs.splice(0, 1)[idx];\n\n    if (toString.call(src) === '[object Object]') {\n      for (p in src) {\n        if (Object.prototype.hasOwnProperty.call(src, p)) {\n          if (toString.call(src[p]) === '[object Object]') {\n            dst[p] = mergeObjects(dst[p] || {}, src[p]);\n          } else {\n            dst[p] = src[p];\n          }\n        }\n      }\n    }\n  }\n\n  return dst;\n}","map":{"version":3,"sources":["/home/vscode/code/next-boiler/lib/helpers.ts"],"names":["mergeObjects","args","dst","src","p","aargs","splice","call","length","idx","toString","Object","prototype","hasOwnProperty"],"mappings":"AAAA,OAAO,SAASA,YAAT,CAAsB,GAAGC,IAAzB,EAAoC;AACzC,QAAMC,GAAG,GAAG,EAAZ;AACA,MAAIC,GAAJ;AACA,MAAIC,CAAJ,CAHyC,CAIzC;;AACA,QAAMC,KAAK,GAAG,GAAGC,MAAH,CAAUC,IAAV,CAAeN,IAAf,EAAqB,CAArB,CAAd;;AAEA,SAAOI,KAAK,CAACG,MAAN,GAAe,CAAtB,EAAyB;AACvB,UAAMC,GAAG,GAAG,CAAZ;AACAN,IAAAA,GAAG,GAAGE,KAAK,CAACC,MAAN,CAAa,CAAb,EAAgB,CAAhB,EAAmBG,GAAnB,CAAN;;AACA,QAAIC,QAAQ,CAACH,IAAT,CAAcJ,GAAd,MAAuB,iBAA3B,EAA8C;AAC5C,WAAKC,CAAL,IAAUD,GAAV,EAAe;AACb,YAAIQ,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCN,IAAhC,CAAqCJ,GAArC,EAA0CC,CAA1C,CAAJ,EAAkD;AAChD,cAAIM,QAAQ,CAACH,IAAT,CAAcJ,GAAG,CAACC,CAAD,CAAjB,MAA0B,iBAA9B,EAAiD;AAC/CF,YAAAA,GAAG,CAACE,CAAD,CAAH,GAASJ,YAAY,CAACE,GAAG,CAACE,CAAD,CAAH,IAAU,EAAX,EAAeD,GAAG,CAACC,CAAD,CAAlB,CAArB;AACD,WAFD,MAEO;AACLF,YAAAA,GAAG,CAACE,CAAD,CAAH,GAASD,GAAG,CAACC,CAAD,CAAZ;AACD;AACF;AACF;AACF;AACF;;AAED,SAAOF,GAAP;AACD","sourcesContent":["export function mergeObjects(...args: any) {\n  const dst = {};\n  let src;\n  let p;\n  // @ts-ignore\n  const aargs = [].splice.call(args, 0);\n\n  while (aargs.length > 0) {\n    const idx = 0;\n    src = aargs.splice(0, 1)[idx];\n    if (toString.call(src) === '[object Object]') {\n      for (p in src) {\n        if (Object.prototype.hasOwnProperty.call(src, p)) {\n          if (toString.call(src[p]) === '[object Object]') {\n            dst[p] = mergeObjects(dst[p] || {}, src[p]);\n          } else {\n            dst[p] = src[p];\n          }\n        }\n      }\n    }\n  }\n\n  return dst;\n}\n"]},"metadata":{},"sourceType":"module"}