{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar _jsxFileName = \"/home/vscode/code/next-boiler/pages/index.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Container from '../lib/container';\nimport { withApollo } from '../lib/withApollo';\nimport checkCurrentUser from '../lib/checkCurrentUser';\n\nconst ApplicationIndex = props => __jsx(Container, _extends({}, props, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 7\n  },\n  __self: this\n}), __jsx(\"p\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 8\n  },\n  __self: this\n}, \"Testing\"));\n\nApplicationIndex.getInitialProps = async context => {\n  const {\n    currentUser\n  } = await checkCurrentUser(context);\n  return {\n    currentUser,\n    query: context.query\n  };\n}; // Anything else like usually withApollo\n\n\nexport default withApollo(ApplicationIndex);","map":{"version":3,"sources":["/home/vscode/code/next-boiler/pages/index.tsx"],"names":["React","Container","withApollo","checkCurrentUser","ApplicationIndex","props","getInitialProps","context","currentUser","query"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,OAAOC,gBAAP,MAA6B,yBAA7B;;AAEA,MAAMC,gBAAgB,GAAIC,KAAD,IACvB,MAAC,SAAD,eAAeA,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,CADF;;AAMAD,gBAAgB,CAACE,eAAjB,GAAmC,MAAMC,OAAN,IAAiB;AAClD,QAAM;AAAEC,IAAAA;AAAF,MAAkB,MAAML,gBAAgB,CAACI,OAAD,CAA9C;AACA,SAAO;AAAEC,IAAAA,WAAF;AAAeC,IAAAA,KAAK,EAAEF,OAAO,CAACE;AAA9B,GAAP;AACD,CAHD,C,CAKA;;;AACA,eAAeP,UAAU,CAACE,gBAAD,CAAzB","sourcesContent":["import React from 'react';\nimport Container from '../lib/container';\nimport { withApollo } from '../lib/withApollo';\nimport checkCurrentUser from '../lib/checkCurrentUser';\n\nconst ApplicationIndex = (props: any) => (\n  <Container {...props}>\n    <p>Testing</p>\n  </Container>\n);\n\nApplicationIndex.getInitialProps = async context => {\n  const { currentUser } = await checkCurrentUser(context);\n  return { currentUser, query: context.query };\n};\n\n// Anything else like usually withApollo\nexport default withApollo(ApplicationIndex);\n"]},"metadata":{},"sourceType":"module"}