{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/home/vscode/code/next-boiler/lib/withApollo.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport Head from 'next/head';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { API_URI, WS_URI } from './constants';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { concat, split } from 'apollo-link';\nimport { setContext } from 'apollo-link-context';\nimport { SubscriptionClient } from 'subscriptions-transport-ws';\nimport { getMainDefinition } from 'apollo-utilities';\nimport { WebSocketLink } from 'apollo-link-ws';\nimport { HttpLink } from 'apollo-boost';\nimport fetch from 'isomorphic-unfetch';\nimport cookie from 'js-cookie';\nlet apolloClient = null;\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\n\nexport function withApollo(PageComponent, {\n  ssr = true\n} = {}) {\n  const WithApollo = (_ref) => {\n    let {\n      apolloClient,\n      apolloState\n    } = _ref,\n        pageProps = _objectWithoutProperties(_ref, [\"apolloClient\", \"apolloState\"]);\n\n    const headers = buildHeaders();\n    const client = apolloClient || initApolloClient(apolloState, headers);\n    return __jsx(ApolloProvider, {\n      client: client,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, __jsx(PageComponent, _extends({}, pageProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    })));\n  }; // Set the correct displayName in development\n\n\n  if (process.env.NODE_ENV !== 'production') {\n    const displayName = PageComponent.displayName || PageComponent.name || 'Component';\n\n    if (displayName === 'App') {\n      console.warn('This withApollo HOC only works with PageComponents.');\n    }\n\n    WithApollo.displayName = \"withApollo(\".concat(displayName, \")\");\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async ctx => {\n      const {\n        AppTree,\n        req\n      } = ctx;\n      const builtHeaders = buildHeaders(req ? req.headers : null); // Initialize ApolloClient, add it to the ctx object so\n      // we can use it in `PageComponent.getInitialProps`.\n\n      const apolloClient = ctx.apolloClient = initApolloClient({}, builtHeaders);\n\n      if (typeof builtHeaders.headers !== 'undefined') {\n        // ensures we dont un-necessarily check currentUser\n        ctx.isAuthorization = typeof builtHeaders.headers.authorization !== 'undefined';\n      } else {\n        ctx.isAuthorization = false;\n      } // Run wrapped getInitialProps methods\n\n\n      let pageProps = {};\n\n      if (PageComponent.getInitialProps) {\n        pageProps = await PageComponent.getInitialProps(ctx);\n      } // Only on the server:\n\n\n      if (false) {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        if (ctx.res && ctx.res.finished) {\n          return pageProps;\n        } // Only if ssr is enabled\n\n\n        if (ssr) {\n          try {\n            // Run all GraphQL queries\n            const {\n              getDataFromTree\n            } = await import('@apollo/react-ssr');\n            await getDataFromTree(__jsx(AppTree, {\n              pageProps: _objectSpread({}, pageProps, {\n                apolloClient\n              }),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 86\n              },\n              __self: this\n            }));\n          } catch (error) {\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            console.error('Error while running `getDataFromTree`', error);\n          } // getDataFromTree does not call componentWillUnmount\n          // head side effect therefore need to be cleared manually\n\n\n          Head.rewind();\n        }\n      } // Extract query data from the Apollo store\n\n\n      const apolloState = apolloClient.cache.extract();\n      return _objectSpread({}, pageProps, {\n        apolloState\n      });\n    };\n  }\n\n  return WithApollo;\n}\n\nfunction initApolloClient(initialState, headers) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (false) {\n    return createApolloClient(initialState, headers);\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    // @ts-ignore\n    apolloClient = createApolloClient(initialState, headers);\n  }\n\n  return apolloClient;\n}\n\nfunction createApolloClient(initialState, builtHeaders) {\n  const fetchOptions = {}; // If you are using a https_proxy, add fetchOptions with 'https-proxy-agent' agent instance\n  // 'https-proxy-agent' is required here because it's a sever-side only module\n\n  if (false) {\n    if (process.env.https_proxy) {\n      // @ts-ignore\n      fetchOptions.agent = new (require('https-proxy-agent'))(process.env.https_proxy);\n    }\n  }\n\n  const authLink = setContext((request, {\n    headers\n  }) => {\n    return _objectSpread({}, builtHeaders);\n  });\n  let wsLink;\n\n  if (true) {\n    // Create a WebSocket link:\n    wsLink = new WebSocketLink(new SubscriptionClient(WS_URI, {\n      reconnect: true,\n      timeout: 30000,\n      connectionParams: () => {\n        return builtHeaders;\n      },\n      connectionCallback: err => {\n        if (err) {\n          wsLink.subscriptionClient.close(false, false);\n        }\n      }\n    }));\n  }\n\n  const httpLink = new HttpLink({\n    uri: API_URI,\n    // Server URL (must be absolute)\n    credentials: 'same-origin',\n    fetch,\n    fetchOptions\n  });\n  return new ApolloClient({\n    ssrMode: false,\n    // Disables forceFetch on the server (so queries are only run once)\n    link: concat(authLink, true ? split( // split based on operation type\n    ({\n      query\n    }) => {\n      // @ts-ignore\n      const {\n        kind,\n        operation\n      } = getMainDefinition(query);\n      return kind === 'OperationDefinition' && operation === 'subscription';\n    }, // @ts-ignore\n    wsLink, httpLink) : httpLink),\n    cache: new InMemoryCache({\n      addTypename: true\n    }).restore(initialState)\n  });\n}\n\nfunction parseCookies(headers) {\n  const list = {};\n\n  if (headers) {\n    const rc = headers.cookie; // tslint:disable-next-line: no-unused-expression\n\n    rc && rc.split(';').forEach(cookie => {\n      const parts = cookie.split('=');\n      list[parts.shift().trim()] = decodeURI(parts.join('='));\n    });\n  }\n\n  return list;\n}\n\nconst buildHeaders = headers => {\n  const anonHeaders = _objectSpread({\n    headers: {\n      'x-hasura-default-role': 'anonymous',\n      'x-hasura-user-id': '00000000-0000-0000-0000-000000000000'\n    }\n  }, headers); // Client-Side Header Builder\n\n\n  if (true) {\n    if (typeof document !== 'undefined' && cookie.get('token')) {\n      return {\n        headers: {\n          authorization: \"Bearer \".concat(cookie.get('token'))\n        }\n      };\n    } else {\n      return anonHeaders;\n    }\n  } else {\n    if (headers && typeof headers.cookie !== 'undefined') {\n      // Server-Side Header Builder\n      const cooked = parseCookies(headers);\n      return cooked.token ? {\n        headers: {\n          authorization: \"Bearer \".concat(cooked.token)\n        }\n      } : anonHeaders;\n    } else {\n      return anonHeaders;\n    }\n  }\n};","map":{"version":3,"sources":["/home/vscode/code/next-boiler/lib/withApollo.tsx"],"names":["React","Head","ApolloProvider","API_URI","WS_URI","ApolloClient","InMemoryCache","concat","split","setContext","SubscriptionClient","getMainDefinition","WebSocketLink","HttpLink","fetch","cookie","apolloClient","withApollo","PageComponent","ssr","WithApollo","apolloState","pageProps","headers","buildHeaders","client","initApolloClient","process","env","NODE_ENV","displayName","name","console","warn","getInitialProps","ctx","AppTree","req","builtHeaders","isAuthorization","authorization","res","finished","getDataFromTree","error","rewind","cache","extract","initialState","createApolloClient","fetchOptions","https_proxy","agent","require","authLink","request","wsLink","reconnect","timeout","connectionParams","connectionCallback","err","subscriptionClient","close","httpLink","uri","credentials","ssrMode","link","query","kind","operation","addTypename","restore","parseCookies","list","rc","forEach","parts","shift","trim","decodeURI","join","anonHeaders","document","get","cooked","token"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Head from 'next/head';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { API_URI, WS_URI } from './constants';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { concat, split } from 'apollo-link';\nimport { setContext } from 'apollo-link-context';\nimport { SubscriptionClient } from 'subscriptions-transport-ws';\nimport { getMainDefinition } from 'apollo-utilities';\nimport { WebSocketLink } from 'apollo-link-ws';\nimport { HttpLink } from 'apollo-boost';\nimport fetch from 'isomorphic-unfetch';\nimport cookie from 'js-cookie';\n\nlet apolloClient = null;\n\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\n\nexport function withApollo(PageComponent: any, { ssr = true }: { ssr?: boolean } = {}) {\n  const WithApollo = ({ apolloClient, apolloState, ...pageProps }) => {\n    const headers = buildHeaders();\n    const client = apolloClient || initApolloClient(apolloState, headers);\n    return (\n      <ApolloProvider client={client}>\n        <PageComponent {...pageProps} />\n      </ApolloProvider>\n    );\n  };\n\n  // Set the correct displayName in development\n  if (process.env.NODE_ENV !== 'production') {\n    const displayName = PageComponent.displayName || PageComponent.name || 'Component';\n\n    if (displayName === 'App') {\n      console.warn('This withApollo HOC only works with PageComponents.');\n    }\n\n    WithApollo.displayName = `withApollo(${displayName})`;\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async ctx => {\n      const { AppTree, req } = ctx;\n\n      const builtHeaders = buildHeaders(req ? req.headers : null);\n      // Initialize ApolloClient, add it to the ctx object so\n      // we can use it in `PageComponent.getInitialProps`.\n\n      const apolloClient = (ctx.apolloClient = initApolloClient({}, builtHeaders));\n\n      if (typeof builtHeaders.headers !== 'undefined') {\n        // ensures we dont un-necessarily check currentUser\n        ctx.isAuthorization = typeof builtHeaders.headers.authorization !== 'undefined';\n      } else {\n        ctx.isAuthorization = false;\n      }\n\n      // Run wrapped getInitialProps methods\n      let pageProps = {};\n      if (PageComponent.getInitialProps) {\n        pageProps = await PageComponent.getInitialProps(ctx);\n      }\n\n      // Only on the server:\n      if (typeof window === 'undefined') {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        if (ctx.res && ctx.res.finished) {\n          return pageProps;\n        }\n\n        // Only if ssr is enabled\n        if (ssr) {\n          try {\n            // Run all GraphQL queries\n            const { getDataFromTree } = await import('@apollo/react-ssr');\n            await getDataFromTree(\n              <AppTree\n                pageProps={{\n                  ...pageProps,\n                  apolloClient,\n                }}\n              />\n            );\n          } catch (error) {\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            console.error('Error while running `getDataFromTree`', error);\n          }\n\n          // getDataFromTree does not call componentWillUnmount\n          // head side effect therefore need to be cleared manually\n          Head.rewind();\n        }\n      }\n\n      // Extract query data from the Apollo store\n      const apolloState = apolloClient.cache.extract();\n\n      return {\n        ...pageProps,\n        apolloState,\n      };\n    };\n  }\n\n  return WithApollo;\n}\n\nfunction initApolloClient(initialState?: any, headers?: any): any {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (typeof window === 'undefined') {\n    return createApolloClient(initialState, headers);\n  }\n\n  // Reuse client on the client-side\n  if (!apolloClient) {\n    // @ts-ignore\n    apolloClient = createApolloClient(initialState, headers);\n  }\n\n  return apolloClient;\n}\n\nfunction createApolloClient(initialState: any, builtHeaders?: any) {\n  const fetchOptions = {};\n  // If you are using a https_proxy, add fetchOptions with 'https-proxy-agent' agent instance\n  // 'https-proxy-agent' is required here because it's a sever-side only module\n  if (typeof window === 'undefined') {\n    if (process.env.https_proxy) {\n      // @ts-ignore\n      fetchOptions.agent = new (require('https-proxy-agent'))(process.env.https_proxy);\n    }\n  }\n\n  const authLink = setContext((request, { headers }) => {\n    return {\n      ...builtHeaders,\n    };\n  });\n\n  let wsLink;\n\n  if (typeof window !== 'undefined') {\n    // Create a WebSocket link:\n    wsLink = new WebSocketLink(\n      new SubscriptionClient(WS_URI, {\n        reconnect: true,\n        timeout: 30000,\n        connectionParams: () => {\n          return builtHeaders;\n        },\n        connectionCallback: err => {\n          if (err) {\n            wsLink.subscriptionClient.close(false, false);\n          }\n        },\n      })\n    );\n  }\n\n  const httpLink = new HttpLink({\n    uri: API_URI, // Server URL (must be absolute)\n    credentials: 'same-origin',\n    fetch,\n    fetchOptions,\n  });\n\n  return new ApolloClient({\n    ssrMode: typeof window === 'undefined', // Disables forceFetch on the server (so queries are only run once)\n    link: concat(\n      authLink,\n      typeof window !== 'undefined'\n        ? split(\n            // split based on operation type\n            ({ query }) => {\n              // @ts-ignore\n              const { kind, operation } = getMainDefinition(query);\n              return kind === 'OperationDefinition' && operation === 'subscription';\n            },\n            // @ts-ignore\n            wsLink,\n            httpLink\n          )\n        : httpLink\n    ),\n    cache: new InMemoryCache({\n      addTypename: true,\n    }).restore(initialState),\n  });\n}\n\nfunction parseCookies(headers?: any) {\n  const list = {};\n  if (headers) {\n    const rc = headers.cookie;\n\n    // tslint:disable-next-line: no-unused-expression\n    rc &&\n      rc.split(';').forEach(cookie => {\n        const parts = cookie.split('=');\n        list[parts.shift().trim()] = decodeURI(parts.join('='));\n      });\n  }\n\n  return list;\n}\n\nconst buildHeaders = (headers?: any) => {\n  const anonHeaders = {\n    headers: {\n      'x-hasura-default-role': 'anonymous',\n      'x-hasura-user-id': '00000000-0000-0000-0000-000000000000',\n    },\n    ...headers,\n  };\n  // Client-Side Header Builder\n  if (typeof window !== 'undefined') {\n    if (typeof document !== 'undefined' && cookie.get('token')) {\n      return {\n        headers: {\n          authorization: `Bearer ${cookie.get('token')}`,\n        },\n      };\n    } else {\n      return anonHeaders;\n    }\n  } else {\n    if (headers && typeof headers.cookie !== 'undefined') {\n      // Server-Side Header Builder\n      const cooked: any = parseCookies(headers);\n      return cooked.token\n        ? {\n            headers: {\n              authorization: `Bearer ${cooked.token}`,\n            },\n          }\n        : anonHeaders;\n    } else {\n      return anonHeaders;\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}